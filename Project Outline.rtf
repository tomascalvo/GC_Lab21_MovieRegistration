{\rtf1\ansi\ansicpg1252\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;\f1\fnil\fcharset0 Monaco;\f2\fmodern\fcharset0 CourierNewPS-BoldMT;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c93333;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid3\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid4\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid101\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid102\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid202\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid203\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 Movie Registration Lab\
Outline\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	1.	}Create a Visual Studio Project called \'93GC_Lab21_MovieRegistrationASPNETMVC\'94.\
{\listtext	2.	}Create a model file called \'93Movie\'94.\
{\listtext	3.	}Code the following properties into model Movie:\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}Id\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}int\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}Title\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}string\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}Genre\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}enum Genre\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}Year\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}DateTime\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}Actors\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}List<Person>\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}Director\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}Person\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	4.	}Code a link on the index view leading to the registration page.\
{\listtext	5.	}Code an HTML form for registering a new movie on the registration page. The form takes in field for each property in model Movie.\
{\listtext	6.	}Call an action to handle the form input.\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}Use method=\'93POST\'94.\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	7.	}Code a result page that displays the message $\'93\{movie.Title\} has been registered.\'94\
{\listtext	8.	}BONUS: Add a copyright that automatically updates to the current year:\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}<p>\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}Copyright Tom\'e1s Calvo @DateTime.Now.Year\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}</p>\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	9.	}VALIDATION\
{\listtext	10.	}Title field allows a maximum of 50 characters.\
{\listtext	11.	}Genre must be radio buttons or drop-down.\
{\listtext	12.	}The minimum year is 1880 and the maximum year is the current year.\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}To reference the current year:\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	
\f1 \uc0\u8259 
\f2\b 	}
\f0\b0 DateTime.Now.Year\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	13.	}User is prompted to re-enter input if input is invalid upon attempt.\
{\listtext	14.	}STATE MANAGEMENT\
{\listtext	15.	}Create a shopping cart.\
{\listtext	16.	}Display a list of movies with name and runtime.\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}MovieList View\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}Shows a list of movies.\
{\listtext	
\f1 \uc0\u8259 
\f0 	}Hardcode the default list of movies at the top of MovieController.\
{\listtext	
\f1 \uc0\u8259 
\f0 	}Each movie listing has an \'93Add Movie\'94 button which calls the add movie (to cart) action.\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls1\ilvl3\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}If the movie is not in the cart, add the movie to the cart and redirect the user the movie list page.\
{\listtext	
\f1 \uc0\u8259 
\f0 	}If the movie is already in the cart, redirect the user to an error page stating that the movie is already in the cart.\
{\listtext	
\f1 \uc0\u8259 
\f0 	}Use sessions for the cart.\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}Cart View\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}The link to the cart view should appear in the navbar if there is at least one movie in the cart.\
{\listtext	
\f1 \uc0\u8259 
\f0 	}The view should display all the movies in the cart.\
{\listtext	
\f1 \uc0\u8259 
\f0 	}At the bottom of the cart there should be a checkout button which will redirect the user the receipt page.\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}Receipt View\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}Displays all the movies in the cart along with their price.\
{\listtext	
\f1 \uc0\u8259 
\f0 	}Clears the cart of all movies.\
{\listtext	
\f1 \uc0\u8259 
\f0 	}Displays the total price of all movie rentals to the user.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Notes:\
\
USING NULLABLE DATA TYPES IN A CONTROLLER ACTION:\
\
Allows an int to be int or null. Allows a char to be char or null. Allows a bool to be null by default, or false or true rather than false by default.\
Example:\
\
public IActionResult Post(int? id)\
\{\
	if (id == null)\
		return new ContentResult \{Content = \'93null\'94\}\
	else\
		return new ContentResult \{Content = id.ToString()\};\
\}\
\
===========\
\
USING OPTIONAL PARAMETER SYNTAX IN A CONTROLLER ACTION:\
\
Provides C# with an explicit default value.\
Example:\
\
public IActionResult Post(int id = -1)\
\{\
	return new ContentResult \{ Content = id.ToString() \};\
\}\
\
===========\
\
ROUTING IS HANDLED IN THE STARTUP CLASS:\
Routing is defined by the call to add MVC to register the ASP.NET Core MVC middleware in the Startup class in the form of a route template. This route template maps URLs to controllers and actions using named placeholders.\
\
\
app.UseMvc(routes => \{\
	routes.MapRoute(\'93Default\'94,\
		\'93\{controller=Home\}/\{action=Index\}/\{id?\}\'94\
	);\
\});\
\
===========\
\
ROUTING TABLE EXAMPLE:\
\
CONTROLLER		ACTION		ROUTE\
Home			Index		/home/index\
Home			Error		/home/error\
Home			About		/home/about\
\
Blog			Index		/blog/index\
Blog			Create		/blog/create\
Blog			Post		/blog/post/\{id\}\
\
Account			Log in		/account/login\
Account			Log out		/account/logout\
\
===========\
\
APPLICATION OF ROUTING CONSTRAINT:\
\
ROUTING DEFINITION (IN Startup.cs) WITHOUT CONSTRAINT:\
\
\'93\{controller=Home\}/\{action=Index\}/\{id?\}\'94\
\
ROUTING DEFINITION (IN Startup.cs) WITH CONSTRAINT:\
\
\'93\{controller=Home\}/\{action=Index\}/\{id:int?\}\'94\
\
===========\
\
LIST OF ALL ROUTING CONSTRAINTS:\
(from docs.asp.net)\
\
alpha\
bool\
datetime\
decimal\
double\
float\
guid\
int\
long\
length(min, max)\
max(value)\
maxlength(value)\
min(value)\
minlength(value)\
range(min, max)\
regex(expression)\
required\
\
===========\
\
USING THE ROUTE ATTRIBUTE TO ROUTE A CUSTOM URL:\
Use controller attribute \'93[Route()]\'94.\
Note the use of constraints on the URL parameters.\
\
public class BlogController : Controller\
    \{\
        // GET: /<controller>/\
        public IActionResult Index()\
        \{\
            return new ContentResult \{ Content = "Blog posts" \};;\
        \}\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b \cf0         [Route("blog/\{year:min(2000)\}/\{month:range(1.12)\}/\{key\}")]
\f0\b0 \
		public IActionResult Post(
\f2\b int year, int month, string key
\f0\b0 )\
        \{\
            return new ContentResult \{\
                Content = string.Format("Year: \{0\}; Month: \{1\}; Key: \{2\}", year, month, key)\
			 \};\
        \}\
    \}\
\
==========\
\
Using an ASP.NET Core MVC Controller action to return an HTML View to the user:\
\
1. CHOOSE A CONTROLLER AND CONFIRM THAT THE CONTROLLER HAS AN ACTION THAT RETURNS A VIEW\
\
The Visual Studio Controller template includes a call to the view method in every new controller class:\
\
public class HomeController : Controller\
\{\
	// Get: /<controller>/\
	public IActionResult Index()\
	\{\
		return View();\
	\}\
\}\
\
2. CONFIRM THAT THERE IS A VIEWS FOLDER IN THE PROJECT CORRESPONDING TO THE CHOSEN CONTROLLER (EG Views/Home)\
\
3. MOVE .HTML PAGE FROM THE wwwroot DIRECTORY TO THE Views/Controller DIRECTORY (EG Views/Home). RENAME THE PAGE TO THE .CSHTML Razor FILE EXTENSION.\
\
The .cshtml extension indicates that the view is defined in the Razor syntax. The Razor syntax allows you to combine HTML and C# code all in one file.\
\
4. USE THE \'91@\'91 SYMBOL TO WRITE C# CODE WITHIN THE VIEW PAGE\
\
==========\
\
HTML Helpers\
\
HTML Helpers are methods provided by libraries like ASP.NET Core and ASP.NET Core MVC. HTML Helpers emit entire sections of HTML with a single method call.\
\

\f2\b Html.ActionLink Helper
\f0\b0 \
\
Use the Html.ActionLink helper method to replace an anchor element with a link that will sync with the right route, even if it changes. The Html.ActionLink helper generates anchor tags based on three parameters: a string to display, a controller action to invoke and a controller name.\
\
Static HTML Anchor Element:\
<a href=\'93/blog\'94 title=\'93read our blog\'94>Read our Blog</a>\
\
Html.ActionLink Helper Link:\
@Html.ActionLink(\'93Read our blog\'94, \'93Index\'94, \'93Blog\'94)\
\
Overloaded Html.ActionLink Helper Link that accepts two more parameters: a route data object and an (anonymous) HTML attributes object:\
@Html.ActionLink(\'93Read our blog\'94, \'93Index\'94, \'93Blog\'94, null, new \{ title = \'93Read Our Blog\'94 \})\
\

\f2\b Url.Action Helper\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf0 The Url.Action helper is a more direct alternative to the Html.ActionLink helper method. Like the Html.ActionLink helper method, the Url.Action helper method takes the names of the action and controller as parameters. However, the Url.Action helper method renders only the value of the url itself with no additional HTML.
\f2\b \
\

\f0\b0 Url.Action Helper Link:\
<a href=\'93@Url.Action(\'93Index\'94, \'93Blog\'94)\'94 title=\'93Read Our Blog\'94>Read Our Blog</a>\
\
==========\
\
USING ViewBag TO PASS DATA FROM THE CONTROLLER TO THE VIEW\
\
The easiest way to pass variables from a controller action to be rendered in the view is to use the 
\f2\b ViewBag 
\f0\b0 property. The ViewBag property is a dynamic object that is accessible both on the controller and the view. Whenever we assign a value to ViewBag in the controller it will also be available in the view.\
\
ViewBag CAVEAT: The ViewBag property is a dynamic object. \
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}Definition of dynamic object: Dynamic objects expose members such as properties and methods at run time instead of at compile time. This enables you to create objects to work with structures that do not match a static type or format.)\
{\listtext	
\f1 \uc0\u8259 
\f0 	}Dynamic objects are easy to work with since you don\'92t have to worry about types.\
{\listtext	
\f1 \uc0\u8259 
\f0 	}Without type information, Razor can\'92t provide IntelliSense or protect against type conflicts.\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls2\ilvl1\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}Pass a strongly-typed data model from the controller to the view in order to get full IntelliSense and type checking.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
==========\
\
USING A STRONGLY-TYPED DATA 
\f2\b MODEL
\f0\b0  TO PASS DATA FROM THE CONTROLLER TO THE VIEW\
\
Using a strongly-typed model to pass data from the controller to the view is an alternative to using the non-typed ViewBag property to pass data from the controller to the view.\
\
To create a strongly-typed model:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0\cf0 {\listtext	1.	}Create a \'93Models\'94 folder in the project folder.\
{\listtext	2.	}Create a model class in the Models folder.\
{\listtext	3.	}Assign properties to the model class.\
{\listtext	4.	}Instantiate the model class within its respective controller action.\
{\listtext	5.	}Use the controller action to assign values to the properties of the model object instance.\
{\listtext	6.	}Pass the model instance to the view as a parameter of the return View() method invoked at the end of the controller action.\
{\listtext	7.	}Designate the type of the model. Write this line of Razor at the top of the model class file:\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls3\ilvl1\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}EG:\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls3\ilvl2\cf0 {\listtext	
\f1 \uc0\u8259 
\f0 	}@model ExploreCalifornia.Models.Post\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
==========\
\
CREATING A STRONGLY-TYPED HTML FORM\
\
1. Choose a controller for the form.\
\
	EG:\
\
	BlogController.cs\
\
2. Create a new controller action for the form.\
\
	EG:\
\
	public IActionResult Create() \
	\{\
		return View();\
	\}\
\
3. Designate the route for the controller action.\
\
	EG:\
\
	[Route(\'93create\'94)]\
	public IActionResult Create() \
	\{\
		return View();\
	\}\
\
4. Create a view for the controller action. Remember to create the view file in the folder that shares the name of the right controller.\
\
	EG:\
\
	@\{\
		Layout = \'93_Layout\'94;\
	\}\
	<h1>Create Blog Post</h1>\
	<fieldset></fieldset>\
\
5. Make the form view a strongly-typed view by specifying the @model tag at the top of the file and entering the full class name of the model class to which the form values will be assigned.\
\
	EG:\
\
	@model ExploreCalifornia.Models.Post\
	@\{\
		Layout = \'93_Layout\'94;\
	\}\
	<h1>Create Blog Post</h1>\
	<fieldset></fieldset>\
\
6. Create an HTML form in the view to accept input from the user. One option to create the HTML form is to code a form in HTML in the view page. Another option is to call the Html.BeginForm() helper method in the view.\
\
	EG:\
\
	@model ExploreCalifornia.Models.Post\
	@\{\
		Layout = \'93_Layout\'94;\
	\}\
	<h1>Create Blog Post</h1>\
	<fieldset>\
		@using (Html.BeginForm())\
		\{\
			<p>\
				@Html.LabelFor(x => x.Title)\
				@Html.EditorFor(x => x.Title)\
			</p>\
			<p>\
				@Html.LabelFor(x => x.Body)\
				@Html.TextAreaFor(x => x.Body)\
			</p>\
			<p>\
				<button type=\'93submit\'94>Create Post</button>\
			</p>\
		\}\
	</fieldset>\
\
7. Create a controller action to accept the data from the HTML form and handle the form submission. Start by duplicating the controller action that shows the form.\
\
	EG:\
\
	[Route(\'93create\'94)]\
	public IActionResult Create() \
	\{\
		return View();\
	\}\
\
	[Route(\'93create\'94)]\
	public IActionResult Create() \
	\{\
		return View();\
	\}\
\
8. Designate which of the two controller actions is displaying the view and which of the two controller actions is handling the form submission. Do so by decorating each action with the corresponding attribute: \'93HttpGet\'94 to mark the controller action to display the view and \'93HttpPost\'94 (\'93Http\'94 + \'93model name\'94) to indicate the controller action that should handle the form data.\
\
	EG:\
\
	[HttpGet, Route(\'93create\'94)]\
	public IActionResult Create() \
	\{\
		return View();\
	\}\
\
	[HttpPost, Route(\'93create\'94)]\
	public IActionResult Create() \
	\{\
		return View();\
	\}\
\
9. Differentiate the method signatures of the two controller actions (otherwise they will be exactly the same and the site won\'92t compile). Do so by adding a parameter to one of the controller actions. The data type of the parameter will be the model we used in the HTML form. ASP.NET Core MVC will map all the form fields into this new model object.\
\
	EG:\
\
	[HttpGet, Route(\'93create\'94)]\
	public IActionResult Create() \
	\{\
		return View();\
	\}\
\
	[HttpPost, Route(\'93create\'94)]\
	public IActionResult Create(Post post) \
	\{\
		return View();\
	\}\
\
10. Validate Form Data with Data Annotations\
\
	1. Decorate the model class with validation rules. There are many such built-in .NET model validation attributes in the System.ComponentModel.DataAnnotations namespace: {\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations?view=netcore-3.1"}}{\fldrslt \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 \outl0\strokewidth0 \strokec2 https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations?view=netcore-3.1}}		\
		A. [Required]\
\
			EG:\
\
		
\f2\b 	using System.ComponentModel.DataAnnotations;
\f0\b0 \
			namespace ExploreCalifornia.Models\
			\{\
				public class Post\
				\{\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b \cf0 					[Required]\
					
\f0\b0 public string Title \{ get; set; \}\
					public string Author \{ get; set; \}\

\f2\b 					[Required]\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf0 					public string Body \{ get; set; \}\
					public DateTime Posted \{ get; set; \}\
				\}\
			\}\
\
		B. [StringLength()] and [MinLength()]\
			\
			EG:\
\
			using System.ComponentModel.DataAnnotations;\
			namespace ExploreCalifornia.Models\
			\{\
				public class Post\
				\{\
					[Required]\
\pard\tx0\tx0\tx0\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b \cf0 					[StringLength(100, MinimumLength=5, ErrorMessage = \'93Title must be between 5 and 100 characters long.\'94]\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 					
\f0\b0 public string Title \{ get; set; \}\
					public string Author \{ get; set; \}\
					[Required]\
					
\f2\b [MinLength(100, ErrorMessage = \'93Blog posts must be at least 100 characters long.\'94)]\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf0 					public string Body \{ get; set; \}\
					public DateTime Posted \{ get; set; \}\
				\}\
			\}\
\
		C. [DataType()]\
			\
			EG:\
\
			using System.ComponentModel.DataAnnotations;\
			namespace ExploreCalifornia.Models\
			\{\
				public class Post\
				\{\
					[Required]\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b \cf0 					[DataType(DataType.Text)]
\f0\b0 \
\pard\tx0\tx0\tx0\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 					[StringLength(100, MinimumLength=5, ErrorMessage = \'93Title must be between 5 and 100 characters long.\'94]
\f2\b \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 					
\f0\b0 public string Title \{ get; set; \}\
					public string Author \{ get; set; \}\
					[Required]\
					[MinLength(100, ErrorMessage = \'93Blog posts must be at least 100 characters long.\'94)]\
					
\f2\b [DataType(DataType.MultilineText)]\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf0 					public string Body \{ get; set; \}\
					public DateTime Posted \{ get; set; \}\
				\}\
			\}\
\
	2. Update the view to display the new model validation error messages in response to invalid user input. To do so, use HTML helpers 
\f2\b ValidationMessageFor 
\f0\b0 and 
\f2\b Html.Validation 
\f0\b0 summary. Place a ValidationMessageFor helper on each form field. Place a summary of all the validation errors in the form by calling the Html.Validation summary helper at the top of the form.\
\
	EG: View Page\
\
	@model ExploreCalifornia.Models.Post\
	@\{\
		Layout = \'93_Layout\'94;\
	\}\
	<h1>CreateBlogPost</h1>\
	<fieldset>\
		@using (Html.BeginForm())\
		\{\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b \cf0 			@Html.ValidationSummary\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf0 			<p>\
				@Html.LabelFor(x => x.Title)\
				@Html.EditorFor(x => x.Title)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b \cf0 				@Html.ValidationMessageFor(x => x.Title)
\f0\b0 \
			</p>\
			<p>\
				@Html.LabelFor(x => x.Body)\
				@Html.EditorFor(x => x.Body)\

\f2\b 				@Html.ValidationMessageFor(x => x.Body)
\f0\b0 \
			</p>\
			<p>\
				<button type=\'93submit\'94>Create Post</button>\
			</p>\
		\}	\
	</fieldset>\
\
	3. Check for validation errors in the controller by checking the 
\f2\b ModelState.IsValid 
\f0\b0 property available in every action. The value of the ModelState.IsValid property will be \'93true\'94 if the user has satisfied all of the model validation rules and \'93false\'94 otherwise.\
\
	EG: Controller Class\
	\
	[HttpGet, Route(\'93create\'94)]\
	public IActionResult Create() \
	\{\
		return View();\
	\}\
\
	[HttpPost, Route(\'93create\'94)]\
	public IActionResult Create(Post post) \
	\{\

\f2\b 		if(!ModelState.IsValid)\
		\{
\f0\b0 \
			return View();\
		
\f2\b \}
\f0\b0 \
	\}\
\
==========\
\
STATE MANAGEMENT WITH SESSIONS\
}